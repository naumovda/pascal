250
Модули

{модульное программирование}
Модульное программирование - организация программы как совокупности независимых блоков (модулей).

Использование модульного программирования:
1) упрощает разработку и тестирование программу;
2) дает возможность разрабатывать программу группе разработчиков;
3) позволяет проводить обновление (замену) модуля без изменения остальной части системы.

Основной принцип структурного программирования: декомпозиция сложных на более простые подззадачи.

{Модуль}
Модуль - автономно компилируемая программная единица, реализующая определенную функциональность
и предоставляющая интерфейс к ней.

В Pascal модуль представляющая собой библиотеку типов данных, констант, переменных, процедур и функций.

Исходный текст программы: pas
Результат компиляции программы: exe
Исходный текст модуля: pas
Результат компиляции модуля: tpu (Turbo pascal), dcu (Delhi)

Структура модуля (unit-01.pas)

Заголовок модуля является обязательным, должен быть идентификатором языка Pascal и должен совпадать с именем файла модуля.

Для связи модулей друг с другом используется секция uses, где перечисляются имена подключаемых модулей.
Пример: минимальная программа с подключением модуля.
- порядок подключения модулей в современных реализациях языка Pascal не важен;
- повторное подключение модуля в одной программе (модуле) приведет к ошибке компиляции.

Интерфейсная секция содержит описания, которые будут доступны в других модулях и программах при подключении данного модуля.

Интерфейсная секция может содержать:
- раздел подключения модулей (чтобы использовать их в разделе описания данной секции); 
- раздел описания открытых констант, переменных, типов данных;
- описание (сигнатуры, заголовки) открытых процедур и функций.

Пример: модуль для комплексных чисел (unit03.pas)

Секция реализации может содержать:
- раздел подключения модулей (чтобы использовать их в данной секции и секции инициализации); 
- раздел описания закрытых констант, переменных, типов данных;
- определение (реализация) процедур и функций, описанных в интерфейсной секции;
- определение (реализация) закрытых процедур и функций;

Константы, переменные, типы данных, процедуры и функции, описанные в секции реализации,
являются локальными для модуля и не будут видны в программах и модулях, которые подключат данный модуль.

При определении процедур и функций, описанных в интерфейсной части, можно опускать список формальных параметров.

Пример - продолжение (unit04.pas)

В секции инициализации размещаются операторы, которые исполняются один раз в процессе запуска программы и
используются для подготовки работы модуля (инициализация значений переменных и т.д.).
Запуск секций инициализации осуществляется в порядке следования имен модулей в секции uses.
		

- использование модулей в основной программе
- пример модуля для тестирования
